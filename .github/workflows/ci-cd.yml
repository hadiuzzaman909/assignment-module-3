name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: [self-hosted, windows, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests and capture results
        shell: powershell
        run: |
          npm run check > test-results.txt 2>&1

      - name: Upload test results artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.txt

  deploy:
      name: Deploy Application
      needs: test
      runs-on: [self-hosted, windows, x64]

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Download test results artifact
          uses: actions/download-artifact@v4
          with:
            name: test-results
            path: .

        - name: Display test results
          shell: powershell
          run: Get-Content test-results.txt

        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: Install dependencies
          run: npm install

        - name: Stop existing Node processes
          shell: powershell
          run: |
            Write-Host "Stopping any existing Node servers…"
            try {
              # Attempt to find and stop any running node processes
              Get-Process node -ErrorAction Stop | Stop-Process -Force
              Write-Host "Existing Node processes stopped."
            } catch {
              # If no node processes are found, swallow the error
              Write-Host "No node processes found."
            }

        - name: Start application
          shell: powershell
          run: |
            Write-Host "Launching src/server.js…"
            # Full path to your script
            $script = "$Env:GITHUB_WORKSPACE\src\server.js"
            # Start Node with that script and correct cwd
            Start-Process -FilePath node `
              -ArgumentList $script `
              -WorkingDirectory $Env:GITHUB_WORKSPACE `
              -NoNewWindow

        - name: Wait for service to boot (and debug)
          shell: powershell
          run: |
            Write-Host "Sleeping 8s for server to bind..."
            Start-Sleep -Seconds 8
            Write-Host "Listening on port 3000?"
            netstat -ano | Select-String ":3000"

        - name: Health-check
          shell: powershell
          run: |
            try {
              $res = Invoke-RestMethod http://127.0.0.1:3000/api
              Write-Host "API OK:" $res.message
            } catch {
              Write-Error "Health-check failed"
              exit 1
            }
