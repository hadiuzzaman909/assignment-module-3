name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: [self-hosted, windows, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests and capture results
        shell: powershell
        run: |
          npm run check > test-results.txt 2>&1

      - name: Upload test results artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.txt

  deploy:
      name: Deploy Application
      needs: test
      runs-on: [self-hosted, windows, x64]

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Download test results artifact
          uses: actions/download-artifact@v4
          with:
            name: test-results
            path: .

        - name: Display test results
          shell: powershell
          run: Get-Content test-results.txt

        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: Install dependencies
          run: npm install
          
        - name: Stop existing processes and cleanup
          shell: powershell
          run: |
            Write-Host "Cleaning up existing processes..."
            try {

              Get-Process node -ErrorAction Stop | Stop-Process -Force
              Write-Host "Existing Node processes stopped."
            } catch {
              Write-Host "No existing Node processes found."
            }
            
            Start-Sleep -Seconds 2
            
            try {
              $port3000 = Get-NetTCPConnection -LocalPort 3000 -ErrorAction Stop
              if ($port3000) {
                Write-Host "Port 3000 is in use, attempting to free it..."
                $processId = $port3000.OwningProcess
                Stop-Process -Id $processId -Force
                Start-Sleep -Seconds 2
              }
            } catch {
              Write-Host "Port 3000 is available."
            }
          
        - name: Start application with logging
          shell: powershell
          run: |
            Write-Host "Starting application..."
            Set-Location $Env:GITHUB_WORKSPACE
            
            $process = Start-Process node -ArgumentList 'src/server.js' -PassThru -NoNewWindow
            
            # Store process ID for later reference
            Write-Host "Application started with PID: $($process.Id)"
            echo "APP_PID=$($process.Id)" >> $Env:GITHUB_ENV
            
            # Wait and check if process is still running
            Start-Sleep -Seconds 3
            if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
              Write-Host "Application process is running."
            } else {
              Write-Error "Application process died immediately after start."
              exit 1
            }
          
        - name: Wait for service initialization
          shell: powershell
          run: |
            Write-Host "Waiting for service to initialize..."
            $maxAttempts = 12
            $attempt = 0
            $success = $false
            
            while ($attempt -lt $maxAttempts -and -not $success) {
              $attempt++
              Write-Host "Attempt $attempt of $maxAttempts..."
              
              try {
                if (-not (Get-Process -Id $Env:APP_PID -ErrorAction SilentlyContinue)) {
                  Write-Error "Application process has stopped running."
                  exit 1
                }
                
                $response = Invoke-WebRequest -Uri "http://localhost:3000/api" -Method GET -TimeoutSec 5
                if ($response.StatusCode -eq 200) {
                  Write-Host "Service is responding!"
                  $success = $true
                }
              } catch {
                Write-Host "Service not ready yet, waiting 5 more seconds..."
                Start-Sleep -Seconds 5
              }
            }
            
            if (-not $success) {
              Write-Error "Service failed to start within expected time."
              if (Test-Path "app.log") {
                Write-Host "Recent application logs:"
                Get-Content "app.log" -Tail 20
              }
              exit 1
            }
          
        - name: Health check
          shell: powershell
          run: |
            try {
              Write-Host "Performing health check..."
              $res = Invoke-RestMethod "http://localhost:3000/api" -TimeoutSec 10
              Write-Host "API OK: $($res.message)"
            } catch {
              Write-Error "Health check failed: $($_.Exception.Message)"
              
              Write-Host "Debug information:"
              Write-Host "Process status:"
              if (Get-Process -Id $Env:APP_PID -ErrorAction SilentlyContinue) {
                Write-Host "Application process is still running."
              } else {
                Write-Host "Application process has stopped."
              }
              
              try {
                $portStatus = Get-NetTCPConnection -LocalPort 3000 -ErrorAction Stop
                Write-Host "Port 3000 status: $($portStatus.State)"
              } catch {
                Write-Host "Port 3000 is not in use."
              }
              
              exit 1
            }