name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: [self-hosted, windows, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests and capture results
        shell: powershell
        run: |
          npm run check > test-results.txt 2>&1

      - name: Upload test results artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.txt

  deploy:
      name: Deploy Application
      needs: test
      runs-on: [self-hosted, windows, x64]

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Download test results artifact
          uses: actions/download-artifact@v4
          with:
            name: test-results
            path: .

        - name: Display test results
          shell: powershell
          run: Get-Content test-results.txt

        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: Install dependencies
          run: npm install

        - name: Stop existing Node processes
          shell: powershell
          run: |
            Write-Host "Stopping any existing Node servers…"
            try {
              Get-Process node -ErrorAction Stop | Stop-Process -Force
              Write-Host "Existing Node processes stopped."
            } catch {
              Write-Host "No node processes found."
            }

        - name: Start & Health-check in one shot
          shell: powershell
          run: |
            Write-Host "Launching src/server.js & verifying health…"
            Set-Location $Env:GITHUB_WORKSPACE

            $proc = Start-Process node `
              -ArgumentList 'src/server.js' `
              -WorkingDirectory $Env:GITHUB_WORKSPACE `
              -PassThru

            $healthy = $false
            for ($i = 0; $i -lt 5; $i++) {
              Start-Sleep -Seconds 3
              try {
                $res = Invoke-RestMethod http://127.0.0.1:3000/api -ErrorAction Stop
                Write-Host "API OK:" $res.message
                $healthy = $true
                break
              } catch {
                Write-Host "Attempt $($i+1): service not yet up..."
              }
            }

            if (-not $healthy) {
              Write-Error "Health-check ultimately failed after retries."
              # Kill the server before exit
              $proc | Stop-Process -Force
              exit 1
            }
